'\" t
.\"     Title: crypttab
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 11/24/2011
.\"    Manual: Cryptsetup Manual
.\"    Source: cryptsetup
.\"  Language: English
.\"
.TH "CRYPTTAB" "5" "11/24/2011" "cryptsetup" "Cryptsetup Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
crypttab \- static information about crypted filesystems
.SH "SYNOPSIS"
.PP
\fBcrypttab\fR
.RS 4

\fINAME\fR
\fIDEVICE\fR
\fIKEY\fR
\fIOPTIONS\fR
.RE
.SH "DESCRIPTION"
.sp
The file \fB/etc/crypttab\fR contains descriptive informations about encrypted volumes\&. Each volume is described on a separate line; columns on each line are separated by tabs or spaces\&. Lines starting with "\fI#\fR" are comments, empty lines are ignored\&. The order of records in \fBcrypttab\fR is important because the \fB/etc/init\&.d/boot\&.crypto\fR script sequentially iterates through \fBcrypttab\fR entries\&. All four columns are mandatory, missing or excessive columns will lead to unspecified behaviour\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The first column,
\fINAME\fR
specifies the mapped
\fIdevice name\fR\&. It must be a plain filename without any directories\&. A mapped device
\fB/dev/mapper/\fR\fINAME\fR
will be created by
\fBcryptsetup(8)\fR
crypting data from and onto the
\fIDEVICE\fR\&.
.sp
To actually mount that device it needs to be listed in
\fB/etc/fstab\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The second column
\fIDEVICE\fR
specifies the block special device that should hold the encrypted data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The third column
\fIKEY\fR
specifies a file containing the raw binary key to use for decrypting the encrypted data of
\fIDEVICE\fR\&. The key file can also be a device name (e\&.g\&.
\fB/dev/urandom\fR, which is useful for encrypted swap devices)\&.
.sp
If
\fIKEY\fR
is the string
\fBnone\fR, the key data (i\&.e\&. a password or passphrase) will be read interactively from the console\&. In this case the options precheck, check, checkargs and tries may be useful\&.
.sp
Warning: luks does not support infinite streams (like
\fB/dev/urandom\fR), it requires a fixed size key\&. Typically one uses
\fBnone\fR
for luks\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The fourth field
\fIOPTIONS\fR
specifies the cryptsetup options associated with the encryption process\&. At minimum, the field should contain the string
\fBluks\fR
or the
\fIcipher\fR,
\fIhash\fR
and
\fIsize\fR
options\&.
.sp
Options have to be specified in the format:
\fIkey\fR=\fIvalue\fR[,\fIkey\fR=\fIvalue\fR
\&...]
.RE
.SH "OPTIONS"
.PP
\fBcipher\fR=<cipher>
.RS 4
Encryption algorithm\&. See
\fBcryptsetup \-c\fR\&. Ignored for LUKS volumes\&.
.RE
.PP
\fBsize\fR=<size>
.RS 4
Encryption key size\&. See
\fBcryptsetup \-s\fR\&. Ignored for LUKS volumes\&.
.RE
.PP
\fBhash\fR=<hash>
.RS 4
Hash algorithm\&. See
\fBcryptsetup \-h\fR\&. Ignored for LUKS volumes\&.
.RE
.PP
\fBverify\fR
.RS 4
Verify password\&. See
\fBcryptsetup \-y\fR\&. Ignored for LUKS volumes\&.
.RE
.PP
\fBreadonly\fR
.RS 4
The backing device is read\-only (eg: a dvd)\&.
.RE
.PP
\fBluks\fR
.RS 4
Use device with luks extensions\&.
.RE
.PP
\fBswap\fR
.RS 4
Run
\fBmkswap\fR
on the created device\&.
.RE
.PP
\fBtmp\fR
.RS 4
Run
\fBmkfs\fR
on the created device\&. The file system to use is specified in
\fB/etc/fstab\fR\&. If
\fB/etc/fstab\fR
does not list the mapped device, ext2 is used as fallback\&.
.RE
.PP
\fBcheck\fR[=<program>]
.RS 4
Check the content of the mapped device by a suitable program; if the check fails the device is removed\&. The specified program is run giving the decrypted volume (/dev/mapper/NAME) as first and the value of the checkargs option as second argument\&. Cryptdisks searches for the given program in /lib/cryptsetup/checks/\&. If no program is specified,
vol_id
is used\&.
.RE
.PP
\fBcheckargs\fR=<argument>
.RS 4
Pass <argument> as second argument to the check script
.RE
.PP
\fBprecheck\fR=<program>
.RS 4
Check the source device by suitable program; if the check fails the device is not created; <precheck> is a script to check the source device\&. The source device is given as argument to the script\&. See also the
\fBcheck\fR
option\&.
.RE
.PP
\fBtries\fR=<num>
.RS 4
Prompt for the passphrase at most <num> times if the entered passphrase was wrong\&. Defaults is 3\&. Setting to 0 enabled infinite retries\&.
.RE
.PP
\fBtimeout\fR=<sec>
.RS 4
Time out interactive password prompts after <sec> seconds\&.
.RE
.PP
\fBloop\fR
.RS 4
Always attach a loop device before mapping the device\&. Normally a loop device is used automatically only for image files\&. Useful if the block size of the physical device does not match the block size of the contained file system\&. E\&.g\&. ext2 on a CD\&.
.RE
.PP
\fBnoauto\fR
.RS 4
Causes boot\&.crypto to skip this record during boot\&. To activate this volume later use:
\fB/etc/init\&.d/boot\&.crypto start\fR
<name>
.RE
.PP
\fBnoearly\fR
.RS 4
boot\&.crypto is invoked two times\&. The first time as boot\&.crypto\-early before LVM and MD setup and the second time as boot\&.crypto after mounting local filesystems\&. This option skips the setup of the device in the first invocation\&. It might be needed for crypto file container existing on local filesystems other then root\&.
.RE
.PP
\fBinitrd\fR
.RS 4
tells mkinitrd to activate this device in the initrd already\&. Only LUKS and no other options are supported\&. The root partition is detected automatically by mkinitrd and doesn\(cqt need this option explicitly\&.
.RE
.PP
\fBpseed=<string>\fR
.RS 4
Set a string that is appended to the passphrase after hashing\&. Using different seeds for volumes with the same passphrase makes dictionary attacks harder\&. Use for compatability with loop\-AES\&. Ignored for LUKS volumes\&.
.RE
.PP
\fBitercountk=<num>\fR
.RS 4
Encrypts the hashed password <num> thousand times using AES\-256\&. Use for compatability with loop\-AES\&. Ignored for LUKS volumes\&.
.RE
.PP
\fBkeyscript=<path>\fR
.RS 4
Calls <path> and uses the output passphrase or key\&. If <path> is not absolute
\fB/lib/cryptsetup/scripts\fR
is prepended\&. The only argument passed to the specified program is the value of the key column\&. keyscript also works in the initrd if the specified program is self contained\&. To use the output as raw key specify hash=plain so cryptsetup doesn\(cqt hash it\(cqs input\&. Note that use of a keyscript is not supported by YaST so distribution updates could be problematic when used on mandatory partitions\&.
.RE
.PP
\fBloud\fR, \fBssl\fR, \fBgpg\fR
.RS 4
not supported\&. Listed here as they are supported by Debian\&.
.RE
.SH "CHECKSCRIPTS"
.sp
check scripts are installed in /lib/cryptsetup/checks/ and are called either before (\fIprecheck\fR option) or after (\fIcheck\fR option) the dm\-crypt target is set up\&.
.PP
\fBvol_id\fR
.RS 4

Checks for any known filesystem\&. Supports a filesystem type as argument via <checkargs>:
.RE
.PP
no checkargs
.RS 4
succeeds if any valid filesystem is found on the device\&.
.RE
.PP
"none"
.RS 4
succeeds if no valid filesystem is found on the device\&.
.RE
.PP
"ext3", "xfs", "swap" etc
.RS 4
succeeds if the given filesystem type is found on the device\&.
.RE
.SH "UNLOCKING DEVICES AT BOOT TIME"
.sp
There are three ways to unlock encrypted partitions during boot
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
initrd: the root file system as well as any device listed in crypttab with option
\fIinitrd\fR
are unlocked by the scripts in the initrd already\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
before mounting local file systems: the init script
\fIboot\&.crypto\-early\fR
runs before the scripts that fsck and mount additional filesystems\&. This is the preferred way to unlock devices as the normal fsck and mount scripts can handle the device later in the boot process\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
after mounting local file systems: the
\fIboot\&.crypto\fR
init script is the traditional way of unlocking crypto devices\&. It runs after fsck and mount of local file systems\&.
\fIboot\&.crypto\fR
should only be used for loop mounted images nowadays\&.
.RE
.SH "FSCK"
.sp
fsck is run on unlocked, encrypted devices if the fs_passno value in fstab is non zero\&.
.SH "EXAMPLES"
.PP
\fBEncrypted swap device\fR
.RS 4
cr_sda6 /dev/sda6 /dev/random swap
.RE
.PP
\fBEncrypted luks volume with interactive password\fR
.RS 4
cr_sda1 /dev/sda1 none luks
.RE
.PP
\fBEncrypted luks volume with interactive password, use a custom check script, no retries\fR
.RS 4
cr_sdc1 /dev/sdc1 none luks,check=customscript,checkargs=foo,tries=1
.RE
.PP
\fBEncrypted volume with interactive password and a cryptoloop compatible twofish256 cipher\fR
.RS 4
cr_sda3 /dev/sda3 none cipher=twofish\-cbc\-plain,size=256,hash=sha512
.RE
.SH "SEE ALSO"
.sp
cryptsetup(8), /etc/crypttab, fstab(8)
.SH "AUTHOR"
.sp
Manual page converted to asciidoc by Michael Gebetsroither <michael\&.geb@gmx\&.at>\&. Originally written by Bastian Kleineidam <calvin@debian\&.org> for the Debian distribution of cryptsetup\&. Improved by Jonas Meurer <jonas@freesources\&.org>\&. Modified for SUSE Linux by Ludwig Nussel <ludwig\&.nussel@suse\&.de>\&. Parts of this manual were taken and adapted from the fstab(5) manual page\&.
